<!DOCTYPE html>
<html>

<head>

  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no, minimal-ui">
  <link rel="apple-touch-icon" href="launch3.png">
  <link rel="apple-touch-startup-image" href="launch3.png">

  <link rel="manifest" href="manifest.json">
  <link rel="canonical" href="https://bwedgar.github.io/PushToTelescope/" />
  <title>Document</title>
  <meta name="apple-mobile-web-app-title" content="Push To Telescope">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black">





  <style>
    body {
      background-color: black;
      color: red;
      font-family: verdana;
      font-size: 120%;
    }

    h1 {
      font-size: 120%;
    }

    .name {
      background-color: black;
      color: red;
      font-family: verdana;
      font-size: 7vw;
      border: 1px solid red;

      width: 100%;
      height: 100px;
      overflow: scroll;
    }

    .notes {
      background-color: black;
      color: red;
      font-family: verdana;
      font-size: 7vw;
      border: 1px solid red;
      width: 100%;
      height: 200px;
      overflow: scroll;
    }

    .list {
      background-color: black;
      color: red;
      font-family: verdana;
      font-size: 7vw;
      border: 1px solid red;
      width: 100%;
      height: 600px;
      /* height: 80%; */
      overflow: scroll;
    }

    .button {
      background-color: black;
      color: red;
      font-family: verdana;
      font-size: 7vw;
      border: 1px solid red;
      padding: 2% 2%;
      width: 99%;
      text-align: left;
    }

    .btngroup2 {
      background-color: black;
      color: red;
      font-family: verdana;
      font-size: 7vw;
      border: 1px solid red;
      width: 48%;
      padding: 2% 2%;
    }

    .btngroup7 {
      background-color: black;
      color: red;
      font-family: verdana;
      font-size: 7vw;
      border: 1px solid red;
      width: 12.5%;
      padding: 2% 2%;
    }

    .listCO {
      background-color: black;
      color: red;
      font-family: verdana;
      font-size: 7vw;
      border: 1px solid red;
      width: 12.5%;
      padding: 2% 2%;
    }
  </style>

  <script src="astromath.js"></script>
  <script src="planets.js"></script>
  <script src="celestialobjects.js"></script>
  <script src="sw.js"></script>

  <script>
    function ready() {

      let previousSensor = 0;
      let sensor = 0;
      let compass = 0;
      let compassRaw = 0;
      let offsetCompass = 0;
      let offsetInclination = 0;
      let alt = 0; //altitude of object in degrees
      let altitude = 0; //altitude of telescope in degrees
      let altDev = 0; //difference between alt of object and altitude of telescope in degrees
      let azDev = 0;
      let az = 0;
      let galShow = 0;
      let selectedCos = 0

      astromath.longitude = astromath.radians(174.76); //longitude of observer in degrees East
      astromath.latitude = astromath.radians(-36.8485); //latitude of observer in degrees
      celestialObjects = new CelestialObjects;
      let cos = celestialObjects.makeCelestialObjects();
      let objectTypes = ["GX", "OC", "GC", "ST", "NB", "DS", "RN"]
      let objectNames = ["galaxy", "open cluster", "globular cluster", "star", "bright nebula", "double star", "remnant"]
      offsetCompass = localStorage.getItem("offsetCompass")
      offsetInclination = localStorage.getItem("offsetInclination")

      document.getElementById('pageCO').style.height = screen.height * 0.5 + "px";
      let colorGalaxy = "rgb(60,60,60)"

      // set up canvases
      canvasFinder = document.getElementById("canvasFinder")
      canvasFinder.width = window.innerWidth;
      canvasFinder.height = window.innerHeight * 15 / 100;
      ctxFinder = canvasFinder.getContext("2d")
      canvasAtlas = document.getElementById("canvasAtlas")
      ctxAtlas = canvasAtlas.getContext("2d")
      canvasAtlas.width = window.innerWidth;
      canvasAtlas.height = window.innerHeight * 50 / 100;

      // functions for detecting and responding to telescope movement
      listener = (e) => {
        sensor = -e.accelerationIncludingGravity.x //sensor= 0 when vertical, -6.9 when clockwise 45 degrees, +6.9 when antoclockwise. +/- 10 when horizontal
        sensor = Math.round(sensor * 100) / 100;
        alt = Math.round(alt * 10) / 10 //alt is the altitude of the object
        if (Math.abs(sensor - previousSensor) > 0.05) { //test if the sensor has changed
          previousSensor = sensor
          //when phone is 45 degrees clockwise altitude is 0, when phone is 45 anticlockwise altitude is 90 degrees
          //adjSensor = //a + b * sensor
          altitude = (sensor + 6.9) * 6.4;
          altDev = altitude - alt - offsetInclination;
        }
      }

      listener2 = (e2) => {
        compassRaw = Math.round((e2.webkitCompassHeading - 100) % 360)
        compass = Math.round((compassRaw - offsetCompass) % 360)
        az = Math.round(az * 10) / 10
        azDev = ((compass - az) + 540) % 360 - 180

        //horizontal line
        ctxFinder.beginPath()
        ctxFinder.moveTo(50, ctxFinder.canvas.height / 3)
        ctxFinder.lineTo(ctxFinder.canvas.width - 50, ctxFinder.canvas.height / 3)
        ctxFinder.strokeStyle = "red"
        ctxFinder.lineWidth = 2
        ctxFinder.stroke()
        //cursor 40 units high?
        ctxFinder.beginPath()
        ctxFinder.moveTo(ctxFinder.canvas.width / 2.2 + altDev * 10, ctxFinder.canvas.height / 3 - 20)
        ctxFinder.lineTo(ctxFinder.canvas.width / 2.2 + altDev * 10, ctxFinder.canvas.height / 3 + 20)
        ctxFinder.strokeStyle = "red"
        ctxFinder.lineWidth = 2
        ctxFinder.stroke()
        //centre drawCircle
        ctxFinder.beginPath()
        ctxFinder.arc(ctxFinder.canvas.width / 2.2, ctxFinder.canvas.height / 3, 15, 0, Math.PI * 2, true)
        ctxFinder.stroke()
        ctxFinder.fillStyle = "red"
        ctxFinder.font = "30px Arial"
        //directional pointers
        if (altDev > 0) {
          ctxFinder.fillText('\u21D7', 5, ctxFinder.canvas.height / 3 + 10)
        }
        if (altDev < 0) {
          ctxFinder.fillText('\u21D8', 5, ctxFinder.canvas.height / 3 + 10)
        }
        ctxFinder.beginPath()
        ctxFinder.moveTo(50, ctxFinder.canvas.height / 3 * 2)
        ctxFinder.lineTo(ctxFinder.canvas.width - 50, ctxFinder.canvas.height / 3 * 2)
        ctxFinder.strokeStyle = "red"
        ctxFinder.lineWidth = 2
        ctxFinder.stroke()
        ctxFinder.beginPath()
        ctxFinder.moveTo(ctxFinder.canvas.width / 2.2 + azDev * 10, ctxFinder.canvas.height / 3 * 2 - 20)
        ctxFinder.lineTo(ctxFinder.canvas.width / 2.2 + azDev * 10, ctxFinder.canvas.height / 3 * 2 + 20)
        ctxFinder.strokeStyle = "red"
        ctxFinder.lineWidth = 2
        ctxFinder.stroke()
        ctxFinder.beginPath()
        ctxFinder.arc(ctxFinder.canvas.width / 2.2, ctxFinder.canvas.height / 3 * 2, 15, 0, Math.PI * 2, true)
        ctxFinder.stroke()
        if (azDev > 0) {
          ctxFinder.fillText('\u21BA', 5, ctxFinder.canvas.height / 3 * 2 + 10)
        }
        if (azDev < 0) {
          ctxFinder.fillText('\u21BB', 5, ctxFinder.canvas.height / 3 * 2 + 10)
        }
      }

      showData = (index) => {
        alt = astromath.altitude(astromath.raRadians(cos[index].raHours, cos[index].raMinutes), astromath.decRadians(cos[index].decDegrees, cos[index].decMinutes))
        az = astromath.azimuth(astromath.raRadians(cos[index].raHours, cos[index].raMinutes), astromath.decRadians(cos[index].decDegrees, cos[index].decMinutes))
        textName.innerHTML = cos[index].name + "<br>" + astromath.unitsToSI(cos[index].lightYears) + "ly   <br> " + cos[index].notes;
        showAtlas()
        document.getElementById("pageCO").style.display = "none";
        document.getElementById("pageContent").style.display = "block";
      }

      showCO = (type) => {
        document.getElementById("listCO").innerHTML = "";
        var numberOfItemsAdded = 0;
        for (const co of cos) {
          if (co.type == type && co.visible == true) {
            numberOfItemsAdded++;
            var node = document.createElement("BUTTON");
            var textnode = document.createTextNode(co.name);
            node.appendChild(textnode);
            btn = document.getElementById("listCO").appendChild(node);
            btn.classList.add("button");
            selectedCos = document.getElementById("listCO").firstChild
          }
        }
        if (numberOfItemsAdded > 0) {
          document.getElementById("pageCO").style.display = "block";
          document.getElementById("pageContent").style.display = "none";
        }
      }
      document.getElementById("pageCO").style.display = "block";
      document.getElementById("pageContent").style.display = "block";

      drawCelestialObject = (co, scale, selected) => {
        coords = astromath.polarToCartesian(co.galLatitude, co.galLongitude, co.lightYears)

        if (selected == true) {
          size = 2;
          ctxAtlas.fillStyle = "white"
        } else {
          size = 2;
          ctxAtlas.fillStyle = "red"
        }

        ctxAtlas.arc(coords.x * scale + canvasAtlas.width / 2, (coords.z * scale) / 5 + canvasAtlas.height / 2 + coords.y / 2, size, 0, Math.PI * 2, true)
        ctxAtlas.beginPath()
        ctxAtlas.strokeStyle = "blue"
        ctxAtlas.lineWidth = 1
        ctxAtlas.ellipse(canvasAtlas.width / 2, canvasAtlas.height / 2, canvasAtlas.width / 2, canvasAtlas.height / 12, 0, 0, Math.PI * 2)
        ctxAtlas.stroke()
        ctxAtlas.beginPath()
        ctxAtlas.strokeStyle = "blue"
        ctxAtlas.lineWidth = 1
        ctxAtlas.ellipse(canvasAtlas.width / 2, canvasAtlas.height / 2, canvasAtlas.width / 3, canvasAtlas.height / 17, 0, 0, Math.PI * 2)
        ctxAtlas.stroke()

        ctxAtlas.beginPath()
        ctxAtlas.moveTo(Math.floor(coords.x * scale + canvasAtlas.width / 2), Math.floor((coords.z * scale) / 5 + canvasAtlas.height / 2))
        ctxAtlas.lineTo(Math.floor(coords.x * scale + canvasAtlas.width / 2), Math.floor((coords.z * scale) / 5 + canvasAtlas.height / 2 + coords.y * scale / 2))
        if (coords.y > 0) {
          ctxAtlas.setLineDash([2, 2]);
        } else {
          ctxAtlas.setLineDash([]);
        }
        ctxAtlas.strokeStyle = "red"
        ctxAtlas.lineWidth = 2
        ctxAtlas.stroke()

        ctxAtlas.beginPath()
        ctxAtlas.arc(Math.floor(coords.x * scale + canvasAtlas.width / 2), Math.floor((coords.z * scale) / 5 + canvasAtlas.height / 2 + coords.y * scale / 2), size, 0, Math.PI * 2, true)
        ctxAtlas.fill()
        ctxAtlas.closePath()


      }

      drawSun = () => {
        ctxAtlas.beginPath()
        ctxAtlas.arc(canvasAtlas.width / 2, canvasAtlas.height / 2, 2, 0, Math.PI * 2, true)
        ctxAtlas.closePath()
        ctxAtlas.fillStyle = "yellow"
        ctxAtlas.fill()
      }

      showAtlas = () => {
        ctxAtlas.clearRect(0, 0, canvasAtlas.height, canvasAtlas.width) //clear canvas
        // show only those objects whose distance is greater or equal to the
        // smaller scale and less than the next scale
        //console.log("showAtlas")
        // find the scale for the altas view
        let scales = [0, 0.0005, 12.5, 250, 5000, 50000, 500000, 50000000, 100000000]
        let indexScale = 0
        for (let [i, s] of scales.entries()) {
          if (cos[index].lightYears < s) {
            indexScale = i
            break
          }
        }
        console.log(`distance: ${cos[index].lightYears} indexScale: ${indexScale}`)
        scale = canvasAtlas.width / scales[indexScale] / 2
        console.log(`indexScale: ${indexScale}  scales: ${scales[indexScale]} to ${scales[indexScale+1]} scale: ${scale}`)
        items = 0
        for (let [i, co] of cos.entries()) {
          if (co.lightYears >= scales[indexScale - 1] && co.lightYears < scales[indexScale]) {
            selected = false
            if (i == index) {
              selected = true
            } else {
              selected = false
            }
            drawCelestialObject(co, scale, selected)
          }
          drawSun()
        }
      }

      // at start
      showCO("ST")
      showData(index);

      // event handlers

      window.addEventListener('devicemotion', listener)
      window.addEventListener('deviceorientation', listener2)
      // for testing on laptop
      listener2(0)

      let listCO = document.getElementById("listCO")
      listCO.addEventListener("click", (e) => {
        selectedCos = e.target
        let nameOfCos = e.target.innerHTML
        index = cos.findIndex(x => x.name == nameOfCos.trim());
        showData(index);
      });

      document.getElementById("buttonCalibrate").addEventListener("click", (e) => {
        offsetCompass = compassRaw - az;
        offsetInclination = altitude - alt;
        localStorage.setItem("offsetCompass", offsetCompass);
        localStorage.setItem("offsetInclination", offsetInclination);
      });
      document.getElementById("buttonInfo").addEventListener("click", (e) => {
        window.location.href = "https://bwedgar.github.io/index.html";
      });

      document.getElementById("buttonPrevious").addEventListener("click", (e) => {
        selectedCos = selectedCos.previousSibling
        if (selectedCos === null) {
          selectedCos = document.getElementById("listCO").lastChild
        }
        let nameOfCos = selectedCos.innerHTML
        //console.log(nameOfCos)
        index = cos.findIndex(x => x.name == nameOfCos.trim());
        //showGalaxy(cos[index].type)
        showData(index);
      });

      document.getElementById("buttonNext").addEventListener("click", (e) => {
        selectedCos = selectedCos.nextSibling
        if (selectedCos === null) {
          selectedCos = document.getElementById("listCO").firstChild
        }
        let nameOfCos = selectedCos.innerHTML
        //console.log(nameOfCos)
        index = cos.findIndex(x => x.name == nameOfCos.trim());
        //showGalaxy(cos[index].type)
        showData(index);
      });

      document.getElementById("buttonBrightStars").addEventListener("click", () => showCO("ST"));
      document.getElementById("buttonPlanets").addEventListener("click", () => showCO("PL"));
      document.getElementById("buttonBrightNebulas").addEventListener("click", () => showCO("NB"));
      document.getElementById("buttonOpenClusters").addEventListener("click", () => showCO("OC"));
      document.getElementById("buttonGlobularClusters").addEventListener("click", () => showCO("GC"));
      document.getElementById("buttonGalaxies").addEventListener("click", () => showCO("GX"));
      document.getElementById("buttonPlanetaryNebulas").addEventListener("click", () => showCO("RN"));


    } //end of ready()

    findCoords = () => {
      navigator.serviceWorker.register('/PushToTelescope/sw.js', {
        scope: '/PushToTelescope/'
      }).then((registration) => {
          console.log("Service Worker registration successful: ", registration)
        },
        (err) => {
          console.log("Registration failed", err)
        })

      console.log("at find coords")
      astromath.longitude = astromath.radians(174); //longitude of observer in degrees East
      astromath.latitude = astromath.radians(-35); //latitude of observer in degrees
      ready();
      // if (navigator.geolocation) {
      //   navigator.geolocation.getCurrentPosition((position) => {
      //     coords = position.coords;
      //     console.log(`AT GEOLOCATION latitude: ${coords.latitude} longitude: ${coords.longitude}`)
      //     astromath.longitude = astromath.radians(coords.longitude); //longitude of observer in degrees East
      //     astromath.latitude = astromath.radians(coords.latitude); //latitude of observer in degrees
      //     console.log(`astromath: latitude: ${astromath.latitude} longitude: ${astromath.longitude}`)
      //     ready();
      //   });
      // }



    }

    if (document.readyState == 'loading') {
      document.addEventListener('DOMContentLoaded', findCoords); //ready);
    } else {
      findCoords();
    }
  </script>

</head>


<body>

  <div id="pageContent">
    <div>
      <button id="buttonCalibrate" class="btngroup2">cal</button>
      <button id="buttonInfo" class="btngroup2">info</button>
    </div>
    <div id="content">
      <canvas id="canvasFinder"></canvas>
      <div id="textName" class="name"></div>
      <canvas id="canvasAtlas"></canvas>
    </div>
    <div>
      <button id="buttonBrightStars" class="btngroup7">S</button>
      <button id="buttonPlanets" class="btngroup7">P</button>
      <button id="buttonOpenClusters" class="btngroup7">O</button>
      <button id="buttonGlobularClusters" class="btngroup7">G</button>
      <button id="buttonBrightNebulas" class="btngroup7">N</button>
      <button id="buttonPlanetaryNebulas" class="btngroup7">R</button>
      <button id="buttonGalaxies" class="btngroup7">X</button>
    </div>
    <div>
      <button id="buttonPrevious" class="btngroup2">Previous</button>
      <button id="buttonNext" class="btngroup2">Next</button>
    </div>
  </div>
  <div id="pageCO">
    <div id="listCO" class="list">
    </div>
    <br>
  </div>


</html>
